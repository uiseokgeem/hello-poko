version: '3'

services:
  nginx:
    build:
      context: ./poko/nginx  # 빌드 컨텍스트가 위치한 디렉토리
    volumes:
      - ./frontend/build:/usr/share/nginx/html   # 로컬에서 빌드된 프론트엔드 파일을 Nginx 컨테이너로 마운트(중요)
      - static_volume:/usr/src/app/static
      - media_volume:/usr/src/app/media
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web

  certbot:
    image: certbot/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot

  web:
    build:
      context: ./poko
    command: gunicorn poko.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - static_volume:/usr/src/app/static
      - media_volume:/usr/src/app/media
      - ./poko:/usr/src/app/
    expose:
      - 8000
    env_file:
      - ./poko/.env.dev
    depends_on:
      - db

  db:
    image: postgres:12.0-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./poko/.env.dev.db

volumes:
  postgres_data:
  static_volume:
  media_volume:

# version: '3'

# services:
#   nginx:
#     build: ./poko/nginx # 프로젝트 루트 디렉토리 기준으로 경로 수정
#     volumes:
#       - static_volume:/usr/src/app/static
#       - media_volume:/usr/src/app/media
#       - ./data/certbot/conf:/etc/letsencrypt
#       - ./data/certbot/www:/var/www/certbot
#     ports:
#       - "80:80"
#       - "443:443"
#     depends_on:
#       - web

#   certbot:
#     image: certbot/certbot
#     entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
#     volumes: # 프로젝트 루트 디렉토리 기준으로 경로 수정
#       - ./poko/data/certbot/conf:/etc/letsencrypt
#       - ./poko/data/certbot/www:/var/www/certbot

#   web:
#     build: ./poko
#     command: gunicorn poko.wsgi:application --bind 0.0.0.0:8000
#     volumes:
#       - static_volume:/usr/src/app/static
#       - media_volume:/usr/src/app/media
#       - ./poko:/usr/src/app/
#     expose:
#       - 8000
#     env_file:
#       - ./poko/.env.dev
#     depends_on:
#       - db

#   frontend:
#     build: ./frontend
#     environment:
#       - NODE_ENV=production

#   db:
#     image: postgres:12.0-alpine
#     volumes:
#       - postgres_data:/var/lib/postgresql/data/
#     env_file:
#       - ./poko/.env.dev.db

# volumes:
#   postgres_data:
#   static_volume:
#   media_volume: